name: Release to PyPI

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - pre
      pre_release_type:
        description: 'Pre-release type (REQUIRED when version_bump is pre)'
        required: false
        type: choice
        default: ''
        options:
          - ''
          - alpha
          - beta
          - rc
  
  push:
    tags:
      - 'v*'

jobs:
  # Quick sanity check - rely on CI for full test suite
  sanity-check:
    name: Release Sanity Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      
      - name: Quick sanity test
        run: |
          # Just verify the package can be imported
          poetry run python -c "import django_rls; print(f'Version: {django_rls.__version__}')"
          
          # Run a few critical tests
          poetry run pytest tests/test_policies.py -v

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: sanity-check
    permissions:
      contents: write  # Need write permission to push commits and tags
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          # Use the default GITHUB_TOKEN which has proper permissions
          persist-credentials: true
          fetch-depth: 0  # Need full history for tags
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Bump version
        id: bump
        run: |
          # Validate required files exist
          if [ ! -f "django_rls/__version__.py" ]; then
            echo "Error: Version file not found at django_rls/__version__.py"
            exit 1
          fi
          
          if [ ! -f "pyproject.toml" ]; then
            echo "Error: pyproject.toml not found"
            exit 1
          fi
          
          if [ ! -f "scripts/bump_version.py" ]; then
            echo "Error: Bump version script not found"
            exit 1
          fi
          
          if [ "${{ inputs.version_bump }}" == "pre" ]; then
            if [ -z "${{ inputs.pre_release_type }}" ]; then
              echo "Error: Pre-release type (alpha, beta, or rc) is required when using 'pre' bump type"
              echo "Please re-run the workflow and select a pre-release type"
              exit 1
            fi
            python scripts/bump_version.py ${{ inputs.version_bump }} --pre-release ${{ inputs.pre_release_type }}
          else
            python scripts/bump_version.py ${{ inputs.version_bump }}
          fi
          NEW_VERSION=$(python -c "import sys; sys.path.insert(0, '.'); from django_rls.__version__ import __version__; print(__version__)")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Commit version bump
        run: |
          git add django_rls/__version__.py pyproject.toml
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          
      - name: Create and push tag
        run: |
          # Create tag
          if ! git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"; then
            echo "Error: Failed to create tag"
            exit 1
          fi
          
          # Push branch changes first
          if ! git push origin main; then
            echo "Error: Failed to push branch changes"
            exit 1
          fi
          
          # Then push tag
          if ! git push origin "v${{ steps.bump.outputs.new_version }}"; then
            echo "Error: Failed to push tag"
            exit 1
          fi

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [sanity-check, bump-version]
    if: always() && (needs.sanity-check.result == 'success')
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Build package
        run: |
          poetry build
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    environment: test-release
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          # If using API token instead of trusted publishing:
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  test-installation:
    name: Test Installation from TestPyPI
    runs-on: ubuntu-latest
    needs: publish-testpypi
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install from TestPyPI with retry
        run: |
          MAX_ATTEMPTS=6
          SLEEP_TIME=10
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i of $MAX_ATTEMPTS..."
            
            if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple django-rls; then
              echo "Successfully installed django-rls from TestPyPI"
              break
            else
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "Failed to install after $MAX_ATTEMPTS attempts"
                exit 1
              fi
              echo "Package not yet available, waiting ${SLEEP_TIME}s..."
              sleep $SLEEP_TIME
              SLEEP_TIME=$((SLEEP_TIME * 2))  # Exponential backoff
            fi
          done
          
      - name: Test import
        run: |
          python -c "import django_rls; print(f'django-rls version: {django_rls.__version__}')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: test-installation
    environment: release
    permissions:
      id-token: write  # Required for trusted publishing
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && !contains(needs.bump-version.outputs.new_version, '-'))
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # If using API token instead of trusted publishing:
        # with:
        #   password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, bump-version]
    if: always() && needs.publish-pypi.result == 'success'
    permissions:
      contents: write  # Need write permission to create releases
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ needs.bump-version.outputs.new_version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since $LAST_TAG" >> changelog.md
            git log --pretty=format:"* %s by @%an in %h" $LAST_TAG..HEAD >> changelog.md
            echo "" >> changelog.md
            echo "" >> changelog.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ steps.version.outputs.version }}" >> changelog.md
          else
            echo "### Initial Release ðŸŽ‰" >> changelog.md
            echo "" >> changelog.md
            echo "This is the first release of django-rls!" >> changelog.md
            echo "" >> changelog.md
            echo "### Recent commits:" >> changelog.md
            git log --pretty=format:"* %s by @%an in %h" --max-count=20 >> changelog.md
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            dist/*