name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      publish_to_pypi:
        description: 'Publish to PyPI?'
        required: true
        type: boolean
        default: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For pushing commits and creating releases
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry twine
        poetry install
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get current version
      id: current
      run: |
        CURRENT=$(python -c "import sys; sys.path.insert(0, '.'); from django_rls.__version__ import __version__; print(__version__)")
        echo "version=$CURRENT" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT"
    
    - name: Bump version
      id: bump
      run: |
        python scripts/bump_version.py ${{ inputs.version_bump }}
        NEW_VERSION=$(python -c "import sys; sys.path.insert(0, '.'); from django_rls.__version__ import __version__; print(__version__)")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Run tests
      run: |
        poetry run pytest -xvs
    
    - name: Build package
      run: |
        poetry build
        twine check dist/*
    
    - name: Commit version bump
      run: |
        git add django_rls/__version__.py pyproject.toml
        git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
        git push origin main
        git push origin "v${{ steps.bump.outputs.new_version }}"
    
    - name: Publish to PyPI
      if: inputs.publish_to_pypi
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "âœ… Published to PyPI: https://pypi.org/project/django-rls/${{ steps.bump.outputs.new_version }}/"
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG" >> changelog.md
          git log --pretty=format:"* %s by @%an" $LAST_TAG..HEAD >> changelog.md
        else
          echo "### Initial Release ðŸŽ‰" >> changelog.md
          echo "" >> changelog.md
          echo "First release of django-rls!" >> changelog.md
        fi
        
        if [ "${{ inputs.publish_to_pypi }}" = "true" ]; then
          echo "" >> changelog.md
          echo "### Installation" >> changelog.md
          echo '```bash' >> changelog.md
          echo "pip install django-rls==${{ steps.bump.outputs.new_version }}" >> changelog.md
          echo '```' >> changelog.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        name: v${{ steps.bump.outputs.new_version }}
        body_path: changelog.md
        draft: false
        files: dist/*