name: CI

on:
  push:
    branches: [ '**' ]  # Run on all branches
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_django_rls
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]
        django-version: [5.0, 5.1]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install Django ${{ matrix.django-version }}
      run: |
        poetry run pip install "Django~=${{ matrix.django-version }}.0"
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=django_rls --cov-report=xml --cov-report=html --cov-report=term
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_django_rls
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # Don't fail if codecov is down
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.11' && matrix.django-version == '5.1'  # Only upload once
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Display coverage report
      run: |
        poetry run coverage report
    
    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 85
        MINIMUM_ORANGE: 70
    
    - name: Run linting
      if: matrix.python-version == '3.11' && matrix.django-version == '5.1'  # Only run once
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: coverage-report
      continue-on-error: true
    
    - name: Create test summary
      run: |
        echo "## Test Results Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "coverage-report" ]; then
          echo "### Coverage Report Available" >> $GITHUB_STEP_SUMMARY
          echo "Coverage HTML report has been uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Tests completed across Python 3.10, 3.11, 3.12 and Django 5.0, 5.1" >> $GITHUB_STEP_SUMMARY